import Anthropic from '@anthropic-ai/sdk';
import { env } from '../config/env';
import { AIRecommendation, AIEnhancedExplanation, QuizAttempt } from '@ai-quiz-app/shared';

class AIService {
  private client: Anthropic | null = null;

  constructor() {
    if (env.anthropicApiKey) {
      this.client = new Anthropic({
        apiKey: env.anthropicApiKey,
      });
    }
  }

  private isConfigured(): boolean {
    return this.client !== null;
  }

  async generateRecommendation(
    attempts: QuizAttempt[],
    userPerformance: { averageScore: number; categoryScores: Record<string, number> }
  ): Promise<AIRecommendation> {
    if (!this.isConfigured()) {
      return this.getFallbackRecommendation(userPerformance.averageScore);
    }

    try {
      const prompt = this.buildRecommendationPrompt(attempts, userPerformance);

      const message = await this.client!.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 1024,
        messages: [
          {
            role: 'user',
            content: prompt,
          },
        ],
      });

      const responseText = message.content[0].type === 'text' ? message.content[0].text : '';
      return this.parseRecommendation(responseText, userPerformance.averageScore);
    } catch (error) {
      console.error('AI recommendation error:', error);
      return this.getFallbackRecommendation(userPerformance.averageScore);
    }
  }

  async enhanceExplanation(
    originalExplanation: string,
    userAnswer: string,
    correctAnswer: string,
    question: string
  ): Promise<AIEnhancedExplanation> {
    if (!this.isConfigured()) {
      return {
        originalExplanation,
        enhancedExplanation: originalExplanation,
        additionalContext: 'AI enhancement is not configured. Enable it by setting the ANTHROPIC_API_KEY.',
      };
    }

    try {
      const prompt = `You are an expert AI educator. A student answered a quiz question incorrectly.

Question: ${question}
Student's Answer: ${userAnswer}
Correct Answer: ${correctAnswer}
Standard Explanation: ${originalExplanation}

Please provide:
1. An enhanced, more detailed explanation that addresses why the student's answer was incorrect
2. Additional context or examples to help the student understand the concept better
3. Practical tips to remember this concept

Keep the response concise (2-3 paragraphs max) and educational.`;

      const message = await this.client!.messages.create({
        model: 'claude-3-5-haiku-20241022',
        max_tokens: 512,
        messages: [
          {
            role: 'user',
            content: prompt,
          },
        ],
      });

      const responseText = message.content[0].type === 'text' ? message.content[0].text : '';

      return {
        originalExplanation,
        enhancedExplanation: responseText,
        additionalContext: 'This enhanced explanation was generated by Claude AI to provide additional learning support.',
      };
    } catch (error) {
      console.error('AI explanation enhancement error:', error);
      return {
        originalExplanation,
        enhancedExplanation: originalExplanation,
        additionalContext: 'AI enhancement temporarily unavailable.',
      };
    }
  }

  private buildRecommendationPrompt(
    attempts: QuizAttempt[],
    performance: { averageScore: number; categoryScores: Record<string, number> }
  ): string {
    return `You are an AI learning advisor. Analyze this student's quiz performance and provide personalized recommendations.

Performance Summary:
- Average Score: ${performance.averageScore.toFixed(1)}%
- Total Attempts: ${attempts.length}
- Category Scores: ${JSON.stringify(performance.categoryScores, null, 2)}

Based on this performance, provide:
1. A brief encouraging message (1-2 sentences)
2. 2-3 specific topics they should study next
3. 1-2 areas where they're showing strength
4. 1-2 areas that need improvement

Format your response as JSON with this structure:
{
  "message": "encouraging message",
  "suggestedTopics": ["topic1", "topic2"],
  "strengthAreas": ["strength1"],
  "improvementAreas": ["area1", "area2"]
}`;
  }

  private parseRecommendation(aiResponse: string, averageScore: number): AIRecommendation {
    try {
      // Try to extract JSON from the response
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return {
          message: parsed.message || this.getFallbackMessage(averageScore),
          suggestedTopics: parsed.suggestedTopics || [],
          strengthAreas: parsed.strengthAreas || [],
          improvementAreas: parsed.improvementAreas || [],
        };
      }
    } catch (error) {
      console.error('Failed to parse AI recommendation:', error);
    }

    return this.getFallbackRecommendation(averageScore);
  }

  private getFallbackRecommendation(averageScore: number): AIRecommendation {
    return {
      message: this.getFallbackMessage(averageScore),
      suggestedTopics: [
        'Review agent fundamentals',
        'Practice prompt engineering',
        'Study model selection strategies',
      ],
      strengthAreas: averageScore >= 70 ? ['Good progress overall'] : [],
      improvementAreas: averageScore < 70 ? ['Focus on core concepts', 'Practice more quizzes'] : [],
    };
  }

  private getFallbackMessage(averageScore: number): string {
    if (averageScore >= 90) {
      return 'Excellent work! You have a strong grasp of AI development concepts.';
    } else if (averageScore >= 75) {
      return 'Great job! Keep practicing to master these concepts.';
    } else if (averageScore >= 60) {
      return 'Good effort! Review the material and try again to improve.';
    } else {
      return 'Keep learning! Focus on understanding the fundamentals.';
    }
  }
}

export default new AIService();
